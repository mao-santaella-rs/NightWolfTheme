:root
  --main-color: #06c
  --accent-color: #006
  --padding: 10px
  --border-radius: 5px

.box
  padding: var(--padding)
  border-radius: var(--border-radius)
  margin-bottom: 15px

// Variables
$margin: 10px
$padding: 5%
$title: "Hello, World!"
$font-family: 'Open Sans', sans-serif
$primary-color: #bada55
$secondary-color: rgba(173, 216, 230, 0.3)
$important: true
$border: null
$font-stack: Helvetica, Arial, sans-serif
$margin-values: 10px 15px 20px 25px
$colors: (primary: #bada55, secondary: #add8e6)

// Using the values
body
  margin: $margin
  padding: $padding
  font-family: $font-stack
  color: map-get($colors, primary)

h1
  content: $title
  color: $secondary-color

.box
  border: if($important, 1px solid red, $border)

// Variables
$font-stack: Helvetica, sans-serif
$primary-color: #333

// Nesting
nav
  ul
    margin: 0
    padding: 0
    list-style: none

  li
    display: inline-block

  a
    display: block
    padding: 6px 12px
    text-decoration: none

// Mixins
=border-radius($radius)
  -webkit-border-radius: $radius
  -moz-border-radius: $radius
  -ms-border-radius: $radius
  border-radius: $radius

.box
  +border-radius(10px)

// Operators
.container
  width: 100%
  &__inner
    width: 100% - 20px

.maoma[id^='ltk--modal']:has([class^='casting-drawer'])
  width: 100%

.article
  float: left
  width: 600px / 960px * 100%

.aside
  float: right
  width: 300px / 960px * 100%

// Control Directives
@for $i from 1 through 3
  .item-#{$i}
    width: 2em * $i

// Functions
@function set-text-color($bg-color)
  @if (lightness($bg-color) > 50)
    @return #000 // Light background, return dark color
  @else
    @return #fff // Dark background, return light color

.header
  background-color: $primary-color
  color: set-text-color($primary-color)

@mixin button-base()
  @include typography(button)
  @include ripple-surface
  @include ripple-radius-bounded

  display: inline-flex
  position: relative
  height: $button-height
  border: none
  vertical-align: middle

  &:hover
    cursor: pointer

  &:disabled
    color: $mdc-button-disabled-ink-color
    cursor: default
    pointer-events: none

$roboto-font-path: "../fonts/roboto"

@font-face
  // This is parsed as a normal function call that takes a quoted string.
  src: url("#{$roboto-font-path}/Roboto-Thin.woff2") format("woff2")

  font-family: "Roboto"
  font-weight: 100

@font-face
  // This is parsed as a normal function call that takes an arithmetic
  // expression.
  src: url($roboto-font-path + "/Roboto-Light.woff2") format("woff2")

  font-family: "Roboto"
  font-weight: 300

@font-face
  // This is parsed as an interpolated special function.
  src: url(#{$roboto-font-path}/Roboto-Regular.woff2) format("woff2")

  font-family: "Roboto"
  font-weight: 400

.logo
  $width: 800px
  width: $width
  position: absolute
  left: calc(50% - #{$width / 2})
  top: 0

$padding: 12px

.post
  // Since these max() calls don't use any Sass features other than
  // interpolation, they're compiled to CSS max() calls.
  padding-left: max(#{$padding}, env(safe-area-inset-left))
  padding-right: max(#{$padding}, env(safe-area-inset-right))

.sidebar
  // Since these refer to a Sass variable without interpolation, they call
  // Sass's built-in max() function.
  padding-left: max($padding, 20px)
  padding-right: max($padding, 20px)

ul >
  li
    list-style-type: none

h2
+ p
  border-top: 1px solid gray

p
  ~
    span
      opacity: 0.8

.circle
  $size: 100px
  width: $size
  height: $size
  border-radius: $size / 2

@mixin prefix($property, $value, $prefixes)
  @each $prefix in $prefixes
    -#{$prefix}-#{$property}: $value

    #{$property}: $value

.gray
  @include prefix(filter, grayscale(50%), moz webkit)

.enlarge
  font-size: 14px
  transition:
    property: font-size
    duration: 4s
    delay: 2s

  &:hover
    font-size: 36px

.info-page
  margin: auto
  bottom: 10px
  top: 2px

$rounded-corners: false

.button
  border: 1px solid black
  border-radius: if($rounded-corners, 5px, null)

$primary: #81899b
$accent: #302e24
$warn: #dfa612

:root
  --primary: #{$primary}
  --accent: #{$accent}
  --warn: #{$warn}

  // Even though this looks like a Sass variable, it's valid CSS so it's not evaluated.
  --consumed-by-js: $primary

// ===
// :root {
//   --primary: #81899b;
//   --accent: #302e24;
//   --warn: #dfa612;
//   --consumed-by-js: $primary;
// }

.alert
  // The parent selector can be used to add pseudo-classes to the outer
  // selector.
  &:hover
    font-weight: bold

  // It can also be used to style the outer selector in a certain context, such
  // as a body set to use a right-to-left language.
  [dir=rtl] &
    margin-left: 0
    margin-right: 10px

  // You can even use it as an argument to pseudo-class selectors.
  :not(&)
    opacity: 0.8

// ===
// .alert:hover {
//   font-weight: bold;
// }
// [dir=rtl] .alert {
//   margin-left: 0;
//   margin-right: 10px;
// }
// :not(.alert) {
//   opacity: 0.8;
// }

.accordion
  max-width: 600px
  margin: 4rem auto
  width: 90%
  font-family: "Raleway", sans-serif
  background: #f4f4f4

  &__copy
    display: none
    padding: 1rem 1.5rem 2rem 1.5rem
    color: gray
    line-height: 1.6
    font-size: 14px
    font-weight: 500

    &--open
      display: block

@mixin unify-parent($child)
  @at-root #{selector-unify(&, $child)}
    @content

.wrapper .field
  @include unify-parent("input")
    // ...

  @include unify-parent("select")
    // ...

.alert:hover, %strong-alert
  font-weight: bold

%strong-alert:hover
  color: red

%toolbelt
  box-sizing: border-box
  border-top: 1px rgba(#000, .12) solid
  padding: 16px 0
  width: 100%

  &:hover
    border: 2px rgba(#000, .5) solid

.action-buttons
  @extend %toolbelt
  color: #4285f4

.reset-buttons
  @extend %toolbelt
  color: #cddc39

// ===
// .action-buttons, .reset-buttons {
//   box-sizing: border-box;
//   border-top: 1px rgba(0, 0, 0, 0.12) solid;
//   padding: 16px 0;
//   width: 100%;
// }
// .action-buttons:hover, .reset-buttons:hover {
//   border: 2px rgba(0, 0, 0, 0.5) solid;
// }

// .action-buttons {
//   color: #4285f4;
// }

// .reset-buttons {
//   color: #cddc39;
// }

$global-variable: global value

.content
  $local-variable: local value
  global: $global-variable
  local: $local-variable

.sidebar
  global: $global-variable

  // This would fail, because $local-variable isn't in scope:
  // local: $local-variable

// ===
// .content {
//   global: global value;
//   local: local value;
// }

// .sidebar {
//   global: global value;
// }

$dark-theme: true !default
$primary-color: #f8bbd0 !default
$accent-color: #6a1b9a !default

@if $dark-theme
  $primary-color: darken($primary-color, 60%)
  $accent-color: lighten($accent-color, 60%)

.button
  background-color: $primary-color
  border: 1px solid $accent-color
  border-radius: 3px

$theme-colors: ("success": #28a745, "info": #17a2b8, "warning": #ffc107)

.alert
  // Instead of $theme-color-#{warning}
  background-color: map-get($theme-colors, "warning")

// ===
// .alert {
//   background-color: #ffc107;
// }

@mixin corner-icon($name, $top-or-bottom, $left-or-right)
  .icon-#{$name}
    background-image: url("/icons/#{$name}.svg")
    position: absolute
    #{$top-or-bottom}: 0
    #{$left-or-right}: 0

@include corner-icon("mail", top, right)

// ===
// .icon-mail {
//   background-image: url("/icons/mail.svg");
//   position: absolute;
//   top: 0;
//   left: 0;
// }

@function pow($base, $exponent)
  $result: 1
  @for $_ from 1 through $exponent
    $result: $result * $base

  @return $result

.sidebar
  float: left
  margin-left: pow(4, 3) * 1px

// This comment won't be included in the CSS.
   This is also commented out.

/* But this comment will, except in compressed mode.

/* It can also contain interpolation:
 1 + 1 = #{1 + 1}

/*! This comment will be included even in compressed mode.

p .sans
  font: Helvetica, /* Inline comments must be closed.*/ sans-serif

  @function my-calculation-function($some-number, $another-number)
  @return $some-number + $another-number

/// Computes an exponent.
///
/// @param {number} $base
///   The number to multiply by itself.
/// @param {integer (unitless)} $exponent
///   The number of `$base`s to multiply together.
/// @return {number} `$base` to the power of `$exponent`.
@function pow($base, $exponent)
  $result: 1
  @for $_ from 1 through $exponent
    $result: $result * $base

  @return $result

@mixin my-padding-mixin($some-number)
  padding: $some-number

a
  font-family: $link-font-family
  font-size: $link-font-size
  font-weight: $link-font-weight !important
  text-decoration: none
  background-color: transparent
  -webkit-text-decoration-skip: objects

  @include my-padding-mixin(10px)
    +size(300px)

  &:hover

  &:active, &:hover
    outline-width: 0

  &:active, &:focus, &:hover
    color: $link-hover-color

#{$all-buttons}
  appearance: none
  cursor: pointer
  display: inline-block
  border-radius: $base-border-radius
  color: $white
  background-color: $link-color
  font-family: $link-font-family
  transition: background-color $base-duration $base-timing

button::-moz-focus-inner, [type="button"]::-moz-focus-inner, [type="reset"]::-moz-focus-inner, [type="submit"]::-moz-focus-inner
  border-style: none
  padding: 0

button:-moz-focusring, [type="button"]:-moz-focusring, [type="reset"]:-moz-focusring, [type="submit"]:-moz-focusring
  outline: 1px dotted ButtonText

div
  color: #00ff00

  // nested rules
  #inner.element
    color: #000000

  // parent selector
  &:hover
    text-decoration: underline

  body.firefox &
    font-weight: normal

  &__element, // compound selector
  &--modifier
    border: 1px

  // nested properties
  font:
    family: fantasy
    size: 30em
    weight: bold

  font: 20px/24px fantasy
    weight: bold

/*
 * variables, data types
 */

// assignment
  $number: 5em
  $double-quoted-string: "foo"
  $single-quoted-string: 'bar'
  $not-quoted-string: baz
  $true: true
  $false: false
  $null: null
  $parens-spaces-list: (left top)
  $parens-commas-list: (1px, 2px, 3px, 4px)
$no-parens-spaces-list: 1px 2px 3px 4px
$no-parens-commas-list: arial, some-other-arial, sans-serif
$trailing-comma: (1 2 3,) // a comma-separated list containing a space-separated list
$bracketed-list: [5rem 6rem 7rem] // comma or space separated
$map: (medium: 640, 'large': 960, "x-large": 1280, (xx-large,): 1600) // must have parentheses, be comma separated
$color: #fe57a1
$function-reference: get-function($function-name)

// assign if not already assigned to
$var: 1 !default

#main
    // global variable defined in block
  $width: 5em !global

    // list of parent selectors
  $selectors: &

    // property value
  width: $width

// media feature test
@import "foo" ($orientation: $landscape)
@media ($orientation-landscape)
  width: 700px

// font feature value
@font-feature-values Font One
  @styleset
    nice-style: $value

// @supports test
@supports ($animation-name: $test)
  body
    animation-name: test

@supports ($animation-name-test)
  body
    animation-name: test

// @at-root query
@at-root ($type: $value)
  .top-level
    background: pink

@at-root ($query)
  .top-level
    background: pink

/*
 * operations
 */

body
  // arithmetic operators
  width: (1px + (2em - 3rem)) * (4 / 5vh) % 6cm

  // plain css
  font: 10px/8px
  font: (italic bold 10px/8px)
  font: #{$font-size/#{$line-height}

  // division
  width: $width/2
  width: round(1.5)/2
  width: (500px/2)
  width: 5px + 8px/2px

  // minus sign
  animation-name: a-1 // identifier
  margin: (5px - 3px) 5px-3px 3-2 (1 -$var) // subtraction
  margin: 1 -3em // negative number
  margin: -$var -(1) // unary negation

  // string concatenation
  content: "Foo " + Bar // "Foo Bar"
  font-family: sans- + "serif" // sans-serif

// string concatenation in string-only context
@keyframes ('foo' + bar)
@keyframes (foo + "bar")

// comparison operators, logical operators
$a: (1 < 2 and 1 > 2) or (1 <= 2) and 1 >= 2
$b: not (1 == 2) and 1 != 2

/*
 * interpolation
 */

// selector
#{'#id',
#i#{'d',
#{'.whole-class',
.part-#{'class'-fragment,
#{'div',
d#{'i'v,
[#{'attr'=#{'value'],
[#{'attr="value"'],
#{'[attr="value"]',
#{'::selection',
::se#{'lect'ion,
#{':hover',
:ho#{'v'er,
#{':lang(fr)',
:la#{'ng(f'r),
:lang(#{'fr'),
:nth-child(#{'2n+1'),
:not(#{'div'),
#{'%placeholder',}
%pla#{'ceho'lder

  // property name
  #{'font': serif}
  background-#{'image': none
  border-#{'bottom'-width: 0}

  // property value
    font-size: #{$font-size}
    font-family: #{'arial, sans'-serif}
    width: #{5 * (3 - 1)px}

  // function name
    background: #{'url'('image.png')}
    background: u#{'r'l('image.png')}

  // !important (exclamation mark needs to be inside)
    width: 0 #{'!important'}
    width: 0 #{'!import'ant}

  // inside strings
    content: "#{$var"}"
    content: '#{$var'}'

  // inside comments
  /* multi-line: #{$yes} */
  // single line: #{$no}

// media type, feature test
@import "foo" #{'screen' and (#{'orientation'}: #{'landscape'})
// @media #{'screen' and (#{'orientation: landscape')
//     width: 700px
// 

// font name, font feature custom name, font feature value
@font-feature-values #{'Font One'}
  @styleset // interpolation not accepted here?
    #{'nice-style': #{12}

// inside @import url()
@import url("http://fonts.googleapis.com/css?family=#{$family}")

// @keyframes name, selector
@keyframes #{'myanim'}
  #{'from' width: 0}
  #{'to'   width: 100%}

// @namespace name
@namespace #{'svg' url('http://www.w3.org/2000/svg')}

// @page custom name, pseudo-page
@page #{'toc'}, #{':first'}
  margin: 0

  @left-top // interpolation not accepted here?
    content: ''

// @supports test
@supports (#{'animation-name'}: #{'test'})
  body
    animation-name: test

// @supports (#{'animation-name: test')
//     body
//         animation-name: test
//     
// 

// @at-root query
@at-root (#{'without'}: #{'media'})
  .top-level
    background: pink

@at-root (#{'without: media'})
  .top-level
    background: pink

/*
 * functions
 */

body
  // single line comments not parsed inside url()
  background: url(http://example.com/styles.css)

  // keyword arguments
  color: hsl($hue: 0, $saturation: 100%, $lightness: 50%)

/*
 * at-rules
 */

// @import
@import "rounded-corners", "text-shadow" // multiple files
#main // nested @import
  @import "example" // but not inside mixins or control directives

// nested @media
@media screen
  .sidebar
    @media (orientation: landscape)
      width: 500px

// @extend
#main
  @extend #hello

  // no error if not found
  @extend .from[the="other-side"] !optional

  // placeholder selector
  @extend div%placeholder

// @at-root
#main
  @at-root .child
    color: red

@media screen
  @supports (font-variant-alternates: styleset(nice-style))
    @at-root (without: media supports) // with query
      .absolutely-top-level
        background: pink

// @if/@else if/@else, @debug/@warn/@error
@if $num-errors == 0
  @debug "$num-errors is 0"
@else if $num-errors > 0
  @warn "oops there are #{$num-errors errors}"
@else
  @error "negative errors?!?"

// @for
@for $i from 1 through 3
  .item-#{$i}
    width: 2em * $i

// @each
@each $animal in puma, sea-slug, egret, salamander
  .#{$animal-icon}
    background-image: url('/images/#{$animal.png}')

@each $header, $size in (h1: 2em, h2: 1.5em, h3: 1.2em)
  #{$header}
    font-size: $size

// @while
$i: 6
@while $i > 0
  .item-#{$i}
    width: 2em * $i

    $i: $i - 2

// @mixin
@mixin large-text
  font-size: 128px

@mixin sexy-border($color, $width: 1in) // with arguments, default value
  border:
    color: $color
    width: $width

@mixin box-shadow($shadows...) // variable arguments
  box-shadow: $shadows

@mixin apply-to-ie6-only // accepts content block
  * html
    @content

div[class^="tocolor-"], div[class*=" tocolor-"]
      color: red

// @include
.page-title
  @include large-text

p
  @include sexy-border(blue) // with arguments

div
  @include sexy-border($color: blue, $width: 10cm) // keyword arguments

.primary
  @include box-shadow($shadows...) // expand list into arguments

@include apply-to-ie6-only // passing content block
  display: block

  #main
    background: black

// @function
@function grid-width($n)
  @return $n * $grid-width + ($n - 1) * $gutter-width

#sidebar
  width: grid-width(5)

/*
 * test cases
 */

.declarations-or-selectors
  // declarations
  display: block
  font-family: arial
  font:
    family: fantasy
    weight: bold

  font: fantasy
    size: 20px
    style: italic

  #{$property}: block
  #{$property}:
    color: red

  color: #000
  width: #{$width}

  // incorrectly highlighted declarations
  display: block

  // selectors
  input:focus
    opacity: 0.5

  div:nth-child(2n+1)
    background-color: gray

  div:-moz-full-screen
    display: block

  a:#{$state}
    color: blue

    #{$selector}: focus
    color: blue

// from file.css

//@charset "UTF-8"
// Sass follows the CSS spec when reading stylesheets,
// so any @charset rule must be at the top of the document

/*
 * general
 */

/* whitespace */
#main
  color: aqua
  float: left!important
  margin: 0
    width
  :
        100%
        !
        important

/* case insensitivity */
Body
    FONT: 12Px/16pX iTaLiC sans-SERIF

/*
 * selectors
 */

/* simple selectors */
#testID,       /* id */
.someclass,    /* class */
div,           /* type */
*,             /* universal */
[lang|="zh"] /* attribute */
  color: black

/* combinators */
header + main, /* adjacent sibling */
li ~ li,       /* general sibling */
ul > li,       /* child */
ul ul        /* descendant */
  color: blue

/* pseudo-elements */
body
  &:after,
  &::after,
  &::placeholder,
  &::selection
    color: green

/* pseudo-classes */
body
  &:hover,
  &:required,
  &:lang(fr),
  &:not(div#sidebar.fancy),
  &:nth-child(n+1),
  &:nth-last-child(-2n - 30),
  &:nth-of-type(5),
  &:nth-last-of-type(even)
    color: yellow

/* pseudo-classes with invalid arguments */
body
  &:not(div:before),         /* pseudo-element */
  &:not(input::placeholder), /* pseudo-element */
  &:not(p:not(:lang(en))),   /* nested :not */
  &:nth-child(1.2n),         /* non-integer */
  &:nth-child(.5),           /* non-integer */
  &:nth-child(n+-1)        /* number sign */
    color: red

/* namespace qualified */
a,           /* type in default namespace */
svg|a,       /* type in specified namespace */
|a,          /* type in no namespace */
*|a,         /* type in all namespaces (including no namespace) */
svg|*,       /* universal */
svg|[fill] /* attribute */
  color: white

/*
 * basic data types
 */

#main
  /* angle */
  transform: rotate(+33.333e+3deg)

  /* color */
  color: #f00
  color: #f00f /* #rgba */
  color: #ff0000
  color: #ff0000ff /* #rrggbbaa */
  color: red
  color: lightgoldenrodyellow
  color: rebeccapurple
  color: currentColor

  /* freqency (not currently used for any property) */
  content: 44.1kHz

  /* integer */
  z-index: +255
  z-index: -1

  /* length */
  width: 10px
  width: 10.5rem
  width: -10e-2vw

  /* number */
  opacity: .5
  opacity: 0.3333
  opacity: 1
  opacity: 2e-34

  /* percentage */
  width: 100%

  /* string */
  content: "double quoted"
  content: 'single quoted'

  /* time */
  transition-duration: .4s
  transition-duration: 400ms

  /* unicode range */
  unicode-range: U+0025-00FF
  unicode-range: U+4?? /* wildcard range */

/* ratio */
@media (min-aspect-ratio: 16/9)

/* resolution */
@media (min-resolution: +2.54dpcm)

/*
 * identifiers
 */

/* leading hyphens */
#-here.-there,
#-- .--everywhere /* two hyphens: https://stackoverflow.com/a/30822662 */
  color: blue

/* non-ASCII */
#español,
#你好,
.❤♫
  color: green

/* invalid identifiers */
#1id,      /* starts with digit */
.-2class /* starts with hyphen digit */
  color: maroon

/*
 * escaping
 */

/* selectors */
#\..\+\ space\@\>,                            /* special character escape */
#\E9 dition .\0000E9dition .motion_\e9motion, /* Unicode character escape */
.\e33 div,                                    /* trailing space terminates Unicode character escape */
.\e33  div,                                   /* extra space to denote separate tokens */
.\31 23                                     /* escape leading digit of identifier */

  /* property value */
  content: "\E9 dition \
            \"\0000E9dition\" \
            \e9motion"

  /* function name */
  background: \u\72\l(image.png)

/*
 * functions
 */

#main
  /* url */
  background: url("image.svg")

  /* function argument keywords */
  background-image: linear-gradient(to left top, #fff, blue)
  grid-template-columns: repeat(2, minmax(max-content, 300px) 1fr) 100px

/*
 * style properties
 */

#main
  /* svg */
  fill: url(#pattern)
  text-rendering: optimizeLegibility

  /* css3 */
  font-variant-east-asian: jis04
  size: letter
  transition-timing-function: ease-in

  /* animatable */
  transition-property: height, font-size, visibility

/*
 * modifiers
 */
body
  background: pink !important

/*
 * media queries
 */

@media screen, (orientation: portrait)
@media not (print and (min-monochrome: 16) and (color))
@media only screen @media not print

/*
 * at-rules
 */

/* @font-face */
@font-face
  font-family: MyHelvetica
  src: local("Helvetica Neue"),
         local("HelveticaNeue"),
         url(MgOpenModerna.ttf)

/* @font-feature-values */
@font-feature-values Font One
  @styleset
    nice-style: 12

.nice-look
  font-variant-alternates: styleset(nice-style)

/* @import */
@import URL("fineprint.css")
@import 'custom.css'
@import url('landscape.css') screen and (orientation: landscape), print

/* @keyframes */
@keyframes myanim
  from opacity: 0.0 
  50%  opacity: 0.5
  to   opacity: 1.0 

/* @media */
@media all
  body
    background: gray

  @media screen, (orientation: portrait)
    body
      background: grey

/* @namespace */
@namespace "http://www.w3.org/1999/xhtml"
@namespace svg url(http://www.w3.org/2000/svg)

/* @page */
@page
  bleed: 1cm

@page toc, :blank
  margin: 2cm
  marks: crop cross

@page index:left
  size: A4

  @top-right
    content: "Page " counter(page)

/* @supports */
@supports (animation-name: test)
  @keyframes 'my-complicated-animation'
    0%   width: 0
    100% width: 100%

/*
 * vendor-specific extensions
 */

/* pseudo-elements */
input[type="number"]::-webkit-outer-spin-button,
input[type="number"]::-webkit-inner-spin-button
  -webkit-appearance: none

input[type="number"]
  -moz-appearance: textfield

/* pseudo-classes */
#page:-moz-full-screen,
#page:-ms-fullscreen,
#page:-webkit-full-screen
  background: silver

/* functions */
.footer
  background-image: -webkit-linear-gradient(to left top, #fff, blue)

/* style properties */
#sidebar
  -ms-overflow-style: -ms-autohiding-scrollbar

@supports not ((text-align-last: justify) or (-moz-text-align-last: justify))
  body
    text-align: justify

@charset "UTF-8"

@font-face
  font-family: 'MyWebFont'
  src: url('myfont.woff2') format('woff2'),
          url('myfont.woff') format('woff')

@keyframes pulse
  0%
    background-color: #001f3f

  100%
    background-color: #ff4136

@page :first
  margin: 1in

@supports (display: flex)
  .module display: flex

@supports (display: flex) and (-webkit-appearance: checkbox)
  .module display: flex

// the @ is ilegal
@mixin my-padding-mixin($some-number,$somoOtherNumber,@-moz-document)
  padding: $some-number

@namespace url(http://www.w3.org/1999/xhtml)

@document
  /* Rules for a specific page */
  url(http://css-tricks.com/),

  /* Rules for pages with a URL that begin with... */
  url-prefix(http://css-tricks.com/snippets/),

  /* Rules for any page hosted on a domain */
  domain(css-tricks.com),

  /* Rules for all secure pages */
  regexp("https:.*")

  /* Start styling */
  body font-family: Comic Sans 

@import "sample1", "sample2", "sample3"

.master
  color: black
  font-size: 12px

.emphasis
  @extend .master
  font-weight: bold

.top
  .first
    font-size: 12px

  @at-root
    .second
      font-size: 14px

    .third
      font-size: 16px

  .fourth
    font-size: 18px

@media screen
  .main
    @media (max-width: 600px)
      width: 100%

    @media (min-width: 700px)
      width: 70%

/* at-rules */
@-webkit-keyframes myanim
  from opacity: 0.0 
  50%  opacity: 0.5 
  to   opacity: 1.0 

.top
  .first
    font-size: 12px

  @at-root
    .second
      font-size: 14px

    .third
      font-size: 16px

  .fourth
    font-size: 18px

@media print
  .copy
    color: black
    @at-root (without: media)
      width: 100%

$wrn: 20px
@warn "#{$wrn"

$test: 1px
@error "#{$test"

@debug 10px + 20px
